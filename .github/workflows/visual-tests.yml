name: Visual Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  visual-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [basic, advanced, grid]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Build project
        run: npm run build
      
      - name: Validate environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Playwright version: $(npx playwright --version)"
      
      - name: Run ${{ matrix.test-type }} visual tests
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_BATCH_NAME: "CI Build ${{ github.run_number }} - ${{ matrix.test-type }}"
          APPLITOOLS_BATCH_ID: "batch-${{ github.run_number }}-${{ matrix.test-type }}"
          APPLITOOLS_BRANCH_NAME: ${{ github.ref_name }}
          APPLITOOLS_PARENT_BRANCH_NAME: ${{ github.event.pull_request.base.ref || 'main' }}
          CI: true
          GITHUB_ACTIONS: true
        run: |
          case "${{ matrix.test-type }}" in
            "basic")
              npm run test:basic
              ;;
            "advanced")
              npm run test:advanced
              ;;
            "grid")
              npm run test:grid
              ;;
            *)
              echo "Unknown test type: ${{ matrix.test-type }}"
              exit 1
              ;;
          esac
      
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Separate job for example tests (simpler, always runs)
  example-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Build project
        run: npm run build
      
      - name: Run example tests (without Applitools)
        env:
          # Don't require Applitools API key for basic validation
          SKIP_APPLITOOLS: true
        run: |
          # Run a simple validation that the project builds and basic playwright works
          npx jest tests/example.test.ts --testNamePattern="should capture the sample page" --bail || true
      
      - name: Run example tests (with Applitools if key available)
        if: ${{ secrets.APPLITOOLS_API_KEY != '' }}
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_BATCH_NAME: "CI Example Tests - Build ${{ github.run_number }}"
          APPLITOOLS_BRANCH_NAME: ${{ github.ref_name }}
        run: |
          npx jest tests/example.test.ts

  # Job to run all tests together (for final validation)
  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: [visual-tests, example-tests]
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Build project
        run: npm run build
      
      - name: Run comprehensive test suite
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_BATCH_NAME: "Comprehensive CI Tests - Build ${{ github.run_number }}"
          APPLITOOLS_BRANCH_NAME: ${{ github.ref_name }}
          APPLITOOLS_PARENT_BRANCH_NAME: ${{ github.event.pull_request.base.ref || 'main' }}
        run: npm test
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Visual Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "- Build Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the [Applitools Dashboard](https://eyes.applitools.com/) for detailed visual test results." >> $GITHUB_STEP_SUMMARY